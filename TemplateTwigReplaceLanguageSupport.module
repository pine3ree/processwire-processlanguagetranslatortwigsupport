<?php

/**
 * ProcessWire Template Twig Replace Language Support
 *
 * See README.md for usage instructions.
 *
 * ProcessWire 2.x
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 *
 * @author Tabea David <td@kf-interactive.com>
 * @version 0.0.4
 * @copyright Copyright (c) 2015 KF Interactive, www.kf-interactive.com, <info@kf-interactive.com>
 * @see https://github.com/justonestep/processwire-processlanguagetranslatortwigsupport
 * @see http://www.processwire.com
 */

/**
 * Class TemplateTwigReplaceLanguageSupport
 */
class TemplateTwigReplaceLanguageSupport extends WireData implements Module {

  /**
   * Retrieves module meta data
   * Implementation of the Module interface
   *
   * @return array
   * @see http://processwire.com/apigen/class-Module.html
   */
  public static function getModuleInfo() {

    return array(
      'title' => 'Template Twig Replace Language Support',
      'version' => 004,
      'summary' => 'Multi-language support for Twig template engine',
      'href' => 'https://github.com/justonestep/processwire-processlanguagetranslatortwigsupport',
      'singular' => true,
      'autoload' => true,
      'requires' => 'TemplateTwigReplace'
    );
  }

  /**
   * Extends the twig render engine
   *
   */
  public function init() {
    // retrieve the Twig_Environment instance
    $this->twig = wire('modules')->get('TemplateTwigReplace')->getTwig();

    // new twig function to enable translations
    // @see: http://processwire.com/api/multi-language-support/code-i18n/
    $function = new Twig_SimpleFunction("__", function ($text, $filename = '_strings', $context = '') {
      if (!empty($filename)) {
        // translation inside twig template folders
        if ($this->twig->getLoader()->exists($filename . '.twig')) {

          $textdomain = $this->twig->getLoader()->getCacheKey($filename . '.twig');
          return __($text, $textdomain, $context);

        // translation outsite twig template folders
        // for example: {{ __(name, 'site/modules/ModuleName/Translation') }}
        } elseif (file_exists($filename . '.php')) {
          return __($text, $filename . '.php', $context);
        } elseif (file_exists($filename . '.module')) {
          return __($text, $filename . '.module', $context);
        }
      }
    });

    // add function to twig environment
    $this->twig->addFunction($function);
  }
}

